// Code generated by go-bindata. DO NOT EDIT.
// sources:
// faucet.html (10.747kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _faucetHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x3a\xed\x92\xdb\x36\x92\xbf\xc7\x4f\xd1\xe1\xd9\x2b\xe9\x3c\x24\x35\x33\xd9\xac\x4b\x22\x95\xb2\xbd\xb9\x3d\x5f\xdd\x39\xa9\xd8\xa9\xbb\xad\x6c\xea\x0a\x22\x5b\x22\x3c\x20\xc0\x00\xa0\x34\xca\x94\xde\xfd\xaa\x01\x92\x22\x25\xcd\xd8\x5e\xfb\xe6\x87\x86\x04\x1a\xdd\x8d\xfe\xee\x96\x92\x6f\xfe\xfa\xe3\xeb\xf7\x7f\xff\xe9\x07\x28\x6c\x29\x16\x4f\x12\xfa\x07\x82\xc9\x75\x1a\xa0\x0c\x16\x4f\x2e\x92\x02\x59\xbe\x78\x72\x71\x91\x94\x68\x19\x64\x05\xd3\x06\x6d\x1a\xd4\x76\x15\xbe\x08\x0e\x1b\x85\xb5\x55\x88\xbf\xd7\x7c\x93\x06\xff\x13\xfe\xf2\x32\x7c\xad\xca\x8a\x59\xbe\x14\x18\x40\xa6\xa4\x45\x69\xd3\xe0\xcd\x0f\x29\xe6\x6b\xec\x9d\x93\xac\xc4\x34\xd8\x70\xdc\x56\x4a\xdb\x1e\xe8\x96\xe7\xb6\x48\x73\xdc\xf0\x0c\x43\xf7\x72\x09\x5c\x72\xcb\x99\x08\x4d\xc6\x04\xa6\x57\xc1\xe2\x09\xe1\xb1\xdc\x0a\x5c\xdc\xdf\x47\x6f\xd1\x6e\x95\xbe\xdd\xef\x67\xf0\xb2\xb6\x05\x4a\xcb\x33\x66\x31\x87\x7f\x63\x75\x86\x36\x89\x3d\xa4\x3b\x24\xb8\xbc\x85\x42\xe3\x2a\x0d\x88\x75\x33\x8b\xe3\x2c\x97\x1f\x4c\x94\x09\x55\xe7\x2b\xc1\x34\x46\x99\x2a\x63\xf6\x81\xdd\xc5\x82\x2f\x4d\x6c\xb7\xdc\x5a\xd4\xe1\x52\x29\x6b\xac\x66\x55\x7c\x13\xdd\x44\x7f\x89\x33\x63\xe2\x6e\x2d\x2a\xb9\x8c\x32\x63\x02\xd0\x28\xd2\xc0\xd8\x9d\x40\x53\x20\xda\x00\xe2\xc5\x3f\x47\x77\xa5\xa4\x0d\xd9\x16\x8d\x2a\x31\xfe\x36\xfa\x4b\x34\x75\x24\xfb\xcb\x8f\x53\x25\xb2\x26\xd3\xbc\xb2\x60\x74\xf6\xc9\x74\x3f\xfc\x5e\xa3\xde\xc5\x37\xd1\x55\x74\xd5\xbc\x38\x3a\x1f\x4c\xb0\x48\x62\x8f\x70\xf1\x45\xb8\x43\xa9\xec\x2e\xbe\x8e\xbe\x8d\xae\xe2\x8a\x65\xb7\x6c\x8d\x79\x4b\x89\xb6\xa2\x76\xf1\xab\xd1\x7d\x48\x87\x1f\x8e\x55\xf8\x35\x88\x95\xaa\x44\x69\xa3\x0f\x26\xbe\x8e\xae\x5e\x44\xd3\x76\xe1\x14\xbf\x23\x40\x4a\x23\x52\x17\xd1\x06\x35\x59\xae\x08\x33\x94\x16\x35\xdc\xd3\xea\x45\xc9\x65\x58\x20\x5f\x17\x76\x06\x57\xd3\xe9\xb3\xf9\xb9\xd5\x4d\xe1\x97\x73\x6e\x2a\xc1\x76\x33\x58\x09\xbc\xf3\x4b\x4c\xf0\xb5\x0c\xb9\xc5\xd2\xcc\xc0\x63\x76\x1b\x7b\x47\xb3\xd2\x6a\xad\xd1\x98\x86\x58\xa5\x0c\xb7\x5c\xc9\x19\x59\x14\xb3\x7c\x83\xe7\x60\x4d\xc5\xe4\xc9\x01\xb6\x34\x4a\xd4\x16\x8f\x18\x59\x0a\x95\xdd\xfa\x35\xe7\xcd\xfd\x4b\x64\x4a\x28\x3d\x83\x6d\xc1\x9b\x63\xe0\x08\x41\xa5\xb1\x41\x0f\x15\xcb\x73\x2e\xd7\x33\xf8\xae\x6a\xee\x03\x25\xd3\x6b\x2e\x67\x30\x3d\x1c\x49\xe2\x56\x8c\x49\xec\x03\xd7\x93\x8b\x64\xa9\xf2\x9d\xd3\x61\xce\x37\x90\x09\x66\x4c\x1a\x1c\x89\xd8\x05\xa4\x01\x00\xc5\x21\xc6\x65\xbb\x35\xd8\xd3\x6a\x1b\x80\x23\x94\x06\x9e\x89\x70\xa9\xac\x55\xe5\x0c\xae\x88\xbd\xe6\xc8\x11\x3e\x11\x8a\x75\x78\x75\xdd\x6e\x5e\x24\xc5\x55\x8b\xc4\xe2\x9d\x0d\x9d\x7e\x3a\xcd\x04\x8b\x84\xb7\x67\x57\x0c\x56\x2c\x5c\x32\x5b\x04\xc0\x34\x67\x61\xc1\xf3\x1c\x65\x1a\x58\x5d\x23\xd9\x11\x5f\x40\x3f\xfc\x3d\x10\xfd\x8a\xab\x96\xaf\x38\xe7\x9b\xe6\x5a\xbd\xc7\xa3\x1b\x3e\x7c\x89\x17\xd0\x3c\xa8\xd5\xca\xa0\x0d\x7b\x77\xea\x01\x73\x59\xd5\x36\x5c\x6b\x55\x57\xdd\xfe\x45\xe2\x56\x81\xe7\x69\x50\x6b\x11\x34\xe1\xdf\x3d\xda\x5d\xd5\x88\x22\xe8\x2e\xae\x74\x19\x92\x26\xb4\x12\x01\x54\x82\x65\x58\x28\x91\xa3\x4e\x83\x77\x2a\xe3\x4c\x80\xf4\x77\x86\x5f\x7e\xfe\x4f\x68\x54\xc6\xe5\x1a\x76\xaa\xd6\xf0\x8a\x4b\x26\x33\x84\x77\x25\xd3\x16\x5e\x17\x8c\x4b\x60\x79\x4e\x96\x1b\x45\x51\x8f\x27\x67\xc6\xa7\x5c\x87\x4b\x2b\x0f\x50\x17\xc9\xb2\xb6\x56\x75\x80\x4b\x2b\x61\x69\x65\x98\xe3\x8a\xd5\xc2\x42\xae\x55\x95\xab\xad\x0c\xad\x5a\xaf\x29\xe9\xf9\xfb\xf8\x43\x01\xe4\xcc\xb2\x66\x2b\x0d\x5a\xd8\x56\x9d\xcc\x54\xaa\xaa\xab\x46\xa1\x7e\x11\xef\x2a\x26\x73\xcc\x49\xfd\xc2\x60\xb0\xf8\x1b\xdf\x20\x94\x08\xaf\xde\xbe\xba\x38\xb6\x8d\x8c\x69\xb4\x61\x1f\xe5\x89\x85\x24\xb1\x67\xc5\x5f\x08\x9a\xbf\xa4\x16\x2d\xa6\xee\x02\x25\xca\x1a\x06\x6f\xa1\xa6\x00\x13\x2c\xee\xef\x35\x93\x6b\x84\xa7\x3c\xbf\xbb\x84\xa7\xac\x54\xb5\xb4\x30\x4b\x21\x7a\xe9\x1e\xcd\x7e\x3f\xc0\x0e\x90\x08\xbe\x48\xd8\x63\x76\x0e\x4a\x66\x82\x67\xb7\x69\x60\x39\xea\xf4\xfe\x9e\x90\xef\xf7\x73\xb8\xbf\xe7\x2b\x78\x1a\xfd\x8c\x19\xab\x6c\x56\xb0\xfd\x7e\xad\xdb\xe7\x08\xef\x30\xab\x2d\x8e\x27\xf7\xf7\x28\x0c\xee\xf7\xa6\x5e\x96\xdc\x8e\xdb\xe3\xb4\x2e\xf3\xfd\x9e\x78\x6e\xf8\xdc\xef\x21\x26\xa4\x32\xc7\x3b\x78\x1a\xfd\x84\x9a\xab\xdc\x80\x87\x4f\x62\xb6\x48\x62\xc1\x17\xcd\xb9\xa1\x90\xe2\x5a\x1c\xac\x25\x26\x73\xe9\x0c\xde\xf9\x8f\x63\xb5\xcf\xe9\x19\x77\x58\x87\x1d\xf7\x8d\x35\x18\x6e\xf1\x16\x77\x69\x70\x7f\xdf\x3f\xdb\xec\x66\x4c\x88\x25\x23\xb9\xf8\xab\x75\x87\xfe\x40\xb2\xd2\x0d\x37\xae\xb6\x5a\xb4\x1c\x1c\xd8\xfe\x44\xff\x3e\x8a\x60\x56\x55\x33\xb8\xb9\xee\x85\xaf\x73\xae\xff\xdd\x91\xeb\xdf\x9c\x05\xae\x98\x44\x01\xee\x33\x34\x25\x13\xed\x73\xe3\x2b\x3d\xd7\x3b\x3e\x14\x52\xb0\xee\x58\xeb\x82\xfe\x74\x0e\x6a\x83\x7a\x25\xd4\x76\x06\xac\xb6\x6a\x0e\x25\xbb\xeb\x12\xdf\xcd\x74\xda\xe7\x9b\x6a\x42\xb6\x14\xe8\xc2\x8c\xc6\xdf\x6b\x34\xd6\x74\x41\xc5\x6f\xb9\x4f\x8a\x2d\x39\x4a\x83\xf9\x91\x34\x88\x22\x89\xd6\x41\xf5\x54\xdf\x09\xf3\x2c\xef\x2b\xa5\xba\x5c\xd2\x67\xa3\x41\xdd\x4b\x7b\xc1\x22\xb1\xfa\x00\x77\x91\xd8\xfc\xb3\x72\x81\xa6\x5a\xef\xa1\x54\xe0\xe3\x19\xdd\xbd\x42\xd4\xbe\xd0\x20\x93\x05\xf7\x9a\xc4\x36\xff\x02\xca\x64\x84\x4b\x66\xf0\x53\xc8\xbb\x94\x7f\x20\xef\x5e\xbf\x94\x7e\x81\x4c\xdb\x25\x32\xfb\x29\x0c\xac\x6a\x99\xf7\xee\xff\xea\xed\xab\x2f\x25\x5f\x4b\xbe\x41\x6d\xb8\xdd\x7d\x2a\x7d\xcc\x0f\x0c\xf8\xf7\x21\x0b\x49\x6c\xf5\xe3\x96\xd6\x7f\xf9\x4a\xae\xfd\xb1\xca\xe4\x66\xf1\xef\x6a\x0b\xb9\x42\x03\xb6\xe0\x06\x28\xc7\x7e\x9f\xc4\xc5\x4d\x07\x52\x2d\xde\xd3\xc6\xca\xd5\x16\xc0\x0d\xe8\x5a\xba\xd4\xab\x24\xd8\x02\x87\xf5\x48\x93\xa5\x23\x78\xaf\xa8\xa6\xdb\xa0\xb4\x50\x32\xc1\x33\xae\x6a\x03\x2c\xb3\x4a\x1b\x58\x69\x55\x02\xde\x15\xac\x36\x96\x10\x51\xd8\x60\x1b\xc6\x85\xf3\x21\xa7\x4a\x50\x1a\x58\x96\xd5\x65\x4d\x35\xa9\x5c\x03\x4a\x55\xaf\x0b\x52\x2c\x58\x05\x3e\x1d\x09\x25\xd7\x1d\x37\xa6\x62\x25\x30\x6b\x59\x76\x6b\x2e\xa1\x8d\x05\xc0\x34\x82\xe5\x98\xd3\xa9\x4c\x95\xa5\x92\x70\xa3\x73\xa8\x98\xb6\x3b\x30\xc3\xd2\x82\x65\x99\xcb\x6d\x11\xbc\x94\x3b\x25\x11\x0a\xb6\x71\xfc\xc1\x7b\xdf\x4d\xb4\x10\x50\xb2\x5d\x4b\xa2\xe1\x77\xcb\x6d\xc1\xbd\x40\x2a\xd4\x25\x81\xe7\x20\x78\xc9\xad\x89\x92\xb8\x3a\xc4\xce\x43\x16\x16\x61\xa1\x34\xff\x83\x6a\x19\xd1\x0f\x94\xf6\x28\x8c\xb4\x51\xd0\x69\x58\xe0\xca\xce\xe0\x5b\x1f\x05\x8f\x6d\xb6\x69\x7a\xce\x19\x6c\x8b\xd3\x35\x93\x94\x5a\x66\x70\xe3\x2b\x58\x5f\x32\xe4\xb6\xc7\x41\x7e\x64\x56\x9e\xe8\x8b\x17\xd5\x5d\xc7\x47\x57\x06\x4f\x3b\x24\xa4\xf3\xa1\x50\x36\xbc\x13\xdd\x25\x94\xec\x16\x81\x41\xc2\x8e\x9a\xe2\x86\x69\xd7\x52\x71\x37\x12\x88\xed\x16\xd1\x7e\x4f\x6e\x9a\xfe\xec\x11\x72\xb9\x7e\x76\x3d\xf5\x36\x48\x0f\x84\xfe\xd9\xf5\x94\x4b\xab\x9e\x5d\x4f\xa7\x77\xd3\x4f\xfc\x7b\x76\x3d\x55\xf2\xd9\xf5\xd4\x16\xf8\xec\x7a\xfa\xec\xfa\xa6\x6f\xbd\x7e\x85\x76\xd1\x10\x95\xd6\x98\x03\xb0\x4c\xaf\xd1\xa6\xc1\xff\xb2\xa5\xaa\xed\x6c\x29\x98\xbc\x0d\x16\x8e\x4d\xaa\x27\x9c\xf6\x3f\x5a\x8a\x42\xc5\x0c\x59\x05\x31\xed\x0c\xa5\x99\x80\x18\x18\x9b\x5a\x6b\x55\x4b\x4a\x81\x40\xd7\x76\x0e\x29\x47\x64\x68\x24\x9b\x49\x94\x2c\x75\xbc\x78\xad\xaa\x5d\xe8\x90\xb8\xe3\x27\x92\x34\x75\x55\x29\x6d\xa3\xbe\x44\x19\x75\x3f\x02\x4d\xfc\x62\xfa\xe7\x17\xdf\x3d\x7a\x13\x43\xb5\xb5\xbb\x4e\xc7\x21\x5b\xaa\x0d\x82\xaf\xe4\x97\xea\x0e\x98\xcc\x61\xc5\x35\x02\xdb\xb2\xdd\x37\x49\x9c\xbb\xbe\xcb\xff\xf9\xd2\xe8\xad\xa2\x96\xa4\xab\x8b\xbc\x3d\xb7\xf9\x98\xe2\x6e\x4e\x75\xa5\x0e\xfe\x69\x1b\xaf\x25\x25\x97\x90\x89\xb3\x79\xe1\x33\xcc\xdc\xd9\xf9\x23\x9c\x7d\xa1\xed\x27\xc6\x6a\x25\xd7\x0b\x32\x0d\x55\x5b\xba\x61\xdb\xa9\x71\x25\xa9\x7d\x75\xdb\x97\x60\x78\x59\x89\x1d\x64\x07\xe5\x7e\xd4\x90\x1e\xd4\xcf\x47\x0d\x69\xa8\x41\x6f\x56\x2e\xbc\x97\x2a\x47\x0a\xee\xa6\x36\x19\x56\x6e\x9a\x47\x21\xf3\xd5\xee\x0f\x26\x2d\x97\xd8\x86\xd6\x08\x7e\x94\x62\x07\xb5\x41\x58\x29\x0d\x39\x2e\xeb\xf5\xda\x65\x03\x0d\x95\xe6\x1b\x66\xb1\x8d\xa7\xa6\x31\x90\xce\x3e\x7a\x85\x2b\xe5\x34\xd1\x4b\x31\x7f\x57\x35\x64\x4c\x82\xd5\x2c\xbb\xf5\xce\x51\x6b\x4d\xd9\xa3\x42\x7f\x9b\x2e\xa2\x2f\x51\xa8\xad\x03\xf1\xf7\x5e\x71\x14\x2e\xbc\x1b\x44\x28\xd4\x16\xca\x3a\x73\xce\x48\xe1\xdb\x5d\x62\xcb\xb8\x85\x5a\x5a\x2e\xbc\x68\x6d\xad\x25\x25\x03\x1c\x84\xe6\x93\xd2\x3e\xc1\x72\xf1\xbe\xc0\x33\x99\xaf\x2b\xca\x41\xe3\x6b\x0f\x0e\x95\x56\x16\x33\xd2\x2d\xb0\x35\xe3\xd2\x90\x46\x5c\xf0\xc7\xf2\x13\x8a\xf6\xee\xa9\x79\x38\x4c\xa2\xdc\x76\x1c\xc3\xdf\x84\x5a\x32\x01\x1b\x32\xfa\xa5\xa0\x7c\xad\x80\x7a\xe4\x81\xb4\x8c\x65\xb6\x36\xa0\x56\x6e\xd5\x73\x4e\xe7\x37\x4c\x93\x06\xb1\xac\x2c\xa4\xcd\x1c\x85\xd6\x0c\xea\x4d\x33\x1d\xa2\x57\x6a\xcc\x06\xfb\x9d\xd4\x53\xf8\xf5\xb7\xf9\x93\x86\x95\xbf\xe2\xca\x99\x04\x99\xba\xbf\xb2\x2d\x98\x85\x4c\x23\xb3\x68\x20\x13\xca\xd4\xda\x73\x48\xdd\x25\x10\x97\x2d\xa6\x16\x33\x6d\x54\x8e\x5a\x8b\x64\x5c\x30\x53\x4c\x9a\x31\x90\x46\xa7\xa5\x6e\xaf\x5d\xbf\x20\xab\x1b\x13\x02\x9e\x4e\xe7\xc0\x93\x16\x6f\x24\x50\xae\x6d\x31\x07\xfe\xfc\x79\x07\x7c\xc1\x57\x30\x6e\x21\x7e\xe5\xbf\x45\xf6\x2e\x22\x2a\x90\xa6\xd0\xa7\xe6\x08\x36\x78\x4c\x25\x78\x86\x63\x7e\x09\x57\x93\x79\xbb\xbb\xd4\xc8\x6e\xdb\xb7\x46\x8f\xfe\x9f\xfb\xdc\xcf\x87\x92\x71\xc2\x1f\xc8\xc6\xb7\x76\x06\x18\xac\xb9\xb1\x50\x6b\x01\x8d\x0f\x7b\x15\x74\x0a\x71\x70\x7d\xa9\x9c\xd8\x65\xf3\xd0\xd8\x54\x7b\x05\x8f\x26\x32\x28\xf3\xf1\x7f\xbc\xfb\xf1\x6d\x64\xac\xe6\x72\xcd\x57\xbb\xf1\x7d\xad\xc5\x0c\x9e\x8e\x83\x7f\xa9\xb5\x08\x26\xbf\x4e\x7f\x8b\x36\x4c\xd4\x78\xe9\xf4\x3d\x73\x9f\x27\x54\x2e\xa1\x79\x9c\xc1\x90\xe0\x7e\x32\x99\x9f\x6f\x83\x7b\x5d\xbb\x46\x83\x76\x4c\x80\x9d\xe1\x1f\xcb\x88\x41\x89\xb6\x50\xce\x75\x35\x66\x4a\x4a\xcc\x2c\xd4\x95\x92\x8d\x48\x40\x28\x63\x0e\x86\xd8\x42\xa4\xa7\x46\xd1\xc0\xa7\x20\x71\x0b\xff\x8d\xcb\x77\x2a\xbb\x45\x3b\x1e\x8f\xb7\x5c\xe6\x6a\x1b\x09\xe5\xa3\x6e\x44\x4e\xaa\x32\x25\x20\x4d\x53\x68\xf2\x66\x30\x81\xef\x21\xd8\x1a\xca\xa0\x01\xcc\xe8\x91\x9e\x26\xf0\x1c\x8e\x8f\x17\xca\x58\x78\x0e\x41\xec\x1d\x8b\x3a\x5e\x6d\x63\x56\xf1\x60\xe2\x7d\xa3\xd5\x82\x92\x25\x1a\xc3\xd6\xd8\xe7\xd6\x55\xc3\x9d\xc5\xd1\xa5\x4a\xb3\x86\x14\x9c\xb6\x2a\xa6\x0d\x7a\x90\x88\x3a\xaf\xd6\xf4\xc8\x80\x1d\x58\x9a\x82\xac\x85\x38\x58\xac\xf7\x90\x79\x6b\x8b\x03\xf0\xc8\xe7\xa0\x6f\xd2\x14\xa8\x11\x21\x79\xe7\x87\x93\x64\x09\xbe\x61\x9a\x44\x94\x24\x0e\x27\x26\xf3\xbe\x69\x0f\xb0\x61\xfe\x31\x74\x98\x1f\xe3\xc3\xfc\x01\x84\xae\x3f\x7d\x0c\x9f\xef\x67\x7b\xe8\xdc\xc2\x03\xd8\x64\x5d\x2e\x51\x3f\x86\xce\xf7\xa7\x0d\x3a\x27\xea\x37\xd2\xf6\xce\x5e\xc2\xd5\x77\x93\x07\xb0\xa3\xd6\xea\x41\xe4\x52\xd9\xdd\xf8\x5e\xb0\x1d\x15\x53\x30\xb2\xaa\x7a\xed\x1a\xca\xd1\xa5\x4b\xbf\x33\xe8\x30\x5c\xba\x31\xe1\x0c\x46\xee\x8d\xf6\x79\x89\xee\xd4\x9f\xa7\xd3\xe9\x25\xb4\xa3\xf6\x57\x8c\x3c\x52\xd7\xb8\x7f\x80\x1f\x53\x67\x19\x15\x01\x5f\xc2\x51\x83\xa3\xe3\xa9\x79\xff\x02\xae\xba\x44\x31\x60\x0b\xfe\xf4\x27\x38\xd9\x1d\x9a\x71\x1c\xc3\x7f\x31\x6a\xbe\x84\x70\x1d\xa3\x6b\x14\x3b\xf8\x92\x1b\xe3\x5a\x30\x03\xb9\x92\xd8\x9c\xf9\xbc\x1c\x70\xc2\x63\x03\x06\x0b\x98\x1e\x33\x48\xb1\xb1\x97\x23\xce\xa4\x8e\x1e\xde\x61\x56\xb8\xd8\xf7\xe9\x0d\x4e\xf2\x12\xe1\x9b\x14\x82\xa0\x7f\xf8\x04\x82\x00\x3a\x64\x17\x06\xed\x7b\xaf\x8b\x71\x93\x2a\xcf\x25\xb2\xc9\x25\xdc\x4c\xa7\xd3\xc9\x09\x13\xfb\x83\x78\x5f\x56\x54\x43\x01\x93\x3b\x17\x1f\x3b\xd9\xba\x2a\x92\xea\x21\x8a\x6f\x02\x32\x25\x84\x2f\x60\x9a\xa3\x24\xe0\xa6\x65\x4e\x21\xbc\x9a\x9f\x49\xa9\x3d\x49\xf6\xae\x76\xac\x9e\x33\xb2\x3f\x56\xd1\x50\x66\x47\xc0\xe1\xd5\x40\x29\x03\x7d\x9d\x57\xcc\x45\xc7\x37\x3f\x48\xf4\x48\x5d\x07\x7d\x1d\xcb\xac\xc7\xbf\xc7\xf3\xfc\xea\x13\xaf\xd1\x6d\x57\xb5\x29\xc6\x47\x8c\x4e\xe6\xa7\xba\x79\x63\x51\x53\xc9\xac\x28\x7f\x91\x2e\xa8\x45\xd0\x78\xa2\x12\x57\xb7\x6b\x0c\x35\xca\x1c\x75\x5b\x5f\xf8\x32\x9f\xaa\xc1\x81\xca\x5c\x57\x39\x30\xa7\xcf\x74\x18\x57\x9f\x29\x89\x00\x00\x47\x4e\xe0\x0c\x75\x60\xa9\x04\x8c\x82\x55\x06\x73\x48\xc1\x7f\xf3\x39\x9e\x44\xb5\xe4\x77\xe3\x49\xd8\xbc\x1f\xe3\x68\xf7\xe7\x5d\xfb\xd8\xb2\xfd\x3c\x85\x20\xb1\x1a\x78\x9e\x8e\x02\x78\x7e\xce\x05\x29\x05\x8f\x16\x07\x0e\xfa\x47\x01\x12\x9b\x2f\xdc\xd4\xcb\xf7\x71\xff\x08\x96\x2c\xbb\x5d\xbb\xae\x68\x46\x75\xd7\xf8\x04\x2d\xdb\x30\xcb\xb4\xc3\x3a\x99\xc3\x01\xbc\x69\x20\x33\x52\xce\x1c\x7c\xa7\xea\x86\x6b\xd0\x8d\xa3\xdd\xdb\x52\xe9\x1c\x75\xa8\x59\xce\x6b\x33\x83\x6f\xab\xbb\xf9\x3f\xda\x71\xbd\x1b\x01\x3e\xca\x6a\xa5\x71\x71\xc2\x51\x33\x67\x7a\x0e\x41\x12\x13\xc0\xc7\xd0\x74\x97\xed\x7f\xe3\x0a\x67\x06\x9d\xd0\x7d\x1f\xda\xac\x97\x3c\xcf\x05\x12\xc3\x07\xf4\xe4\x8c\xa4\xff\xbe\x4b\x0d\x49\x42\x33\xe1\x3c\x9c\xd9\x03\x0a\x83\x8f\x1c\xe8\x86\xa5\x23\x32\x80\x90\xae\xcc\x9d\xcc\x9b\x26\xdc\x2d\xeb\x91\x93\x45\xf3\xfd\x79\x5e\x6b\x57\x78\x8d\xc3\xc6\xc0\x2e\x61\x64\xa8\x10\xcc\xcd\x68\x12\x15\x75\xc9\x24\xff\x03\xc7\x94\x97\x26\x5e\x56\x6e\xfa\x1a\x9c\x86\xe4\x13\x66\x0e\x63\xd1\x51\x9b\xe3\x46\x8d\x10\x47\xad\x76\xbf\x3d\xf4\xfc\x33\x98\xce\x47\x9f\x29\xa1\xf3\x54\xc2\x25\xd3\xd0\x7f\x09\xdb\xe4\x0b\x5a\x11\xf5\x76\x6f\xc9\xf4\xc8\x4f\x38\x5c\xb1\x2e\xd5\x36\x1d\xdd\x4c\x3b\x26\xbd\xa2\x9d\x9e\x47\x8d\xad\x9d\x28\x83\xb8\x6c\x5d\x73\x01\x37\xd3\xaf\xc1\xad\x9f\x92\x1c\xdd\xc0\x6a\x5e\x61\x0e\x2c\xb3\x7c\x83\xff\x0f\x17\xf9\x0a\x42\xfe\x6c\x16\xc9\x0e\x5b\xe1\x39\x33\x1d\xf0\x4b\xbb\x9d\x6c\xff\x95\xfc\x0d\x62\x27\xe1\xe7\x10\x9c\xbd\xc8\x83\x96\x78\x04\x78\xe4\xda\x0f\xfb\xbd\xfb\x3a\x21\x38\xce\x29\x54\xed\x76\x5f\x84\x4d\xa2\xc2\x96\x62\x1c\x24\xd6\xfd\x32\x82\x78\xee\x30\x38\x04\x7e\x79\x58\xd2\xed\x87\x8d\x0c\x35\xf3\x78\xd4\x74\x41\xaf\x38\xe9\x1a\xb3\xb6\x12\x81\xfd\xe1\x07\x24\x71\x0c\xef\x2c\xd3\x16\x18\xfc\xf2\x06\xea\x2a\x67\x96\xb2\x97\x02\xca\x8f\x7e\x58\xde\xfe\xc2\x64\xc9\xb4\x81\x95\xd2\x5b\xa6\xf3\x66\x58\x63\x0b\xdc\xb9\x01\x7e\x5b\xfa\x19\xb4\x6f\x28\x8a\x6d\x98\x18\x9f\x34\x81\x4f\xc7\xa3\xa8\xaf\xf2\xd1\x24\x42\x96\x15\xa7\x80\x2e\x63\x75\x74\x53\x78\xeb\x5a\x80\xf1\xd3\xb1\x2d\xb8\x99\x44\xcc\x5a\x3d\x1e\x0d\x8c\x61\x34\x21\xbd\x5e\xf5\x5a\xb2\xee\x78\x32\x70\xab\xc7\x70\x1c\x8a\xe9\xae\x10\x68\xc1\x33\x63\xc6\xde\xae\x46\x97\x3d\xdc\x43\xb3\x1a\x3d\x1b\x75\x8a\x3a\xb8\xf7\xe1\x1e\xe9\x59\x4e\x06\xa8\x47\xe4\x65\xa3\x13\xf2\x2c\xcf\x5f\x93\xff\x8c\x83\x33\x9e\x7e\x6c\x1d\x93\x4e\xd8\x3e\x5e\x3f\x2a\x65\xff\x15\xfc\x03\x22\xe6\xf9\x68\x12\x99\x7a\xe9\x07\x15\xe3\x3f\x77\x0d\x58\x0b\xe6\x8c\xf7\x38\x15\x9c\x14\x14\x44\x62\x58\x54\x84\x47\x45\xc8\x23\x59\xa3\x21\xe9\x6f\xb5\xbf\x24\x81\x4f\x27\xdd\x9c\xeb\x07\x43\xc5\x15\x37\x05\x30\xd8\xe2\xd2\xb8\xb1\x02\x34\xf6\xee\x46\x3b\x7e\x84\xf3\xf2\xa7\x37\xbd\x31\x4e\xe7\x11\x63\x87\xbd\xfb\xf1\xd7\xb9\xa1\xc9\xd9\x5f\x9b\x6d\xb7\xdb\x68\xad\xd4\x5a\xf8\xdf\x99\x75\x53\x95\x98\x55\x3c\xfa\x60\x02\x60\x66\x27\x33\xc8\x71\x85\x7a\xd1\x43\xdf\x8c\x5a\x92\xd8\xff\x0e\x2a\x89\xfd\x4f\x3d\xff\x2f\x00\x00\xff\xff\xed\x0b\xe3\x34\xfb\x29\x00\x00")

func faucetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_faucetHtml,
		"faucet.html",
	)
}

func faucetHtml() (*asset, error) {
	bytes, err := faucetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "faucet.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdc, 0xe, 0xa1, 0xe4, 0x31, 0x60, 0x2b, 0xb5, 0x44, 0x2a, 0x94, 0xa6, 0x3d, 0x6, 0xa2, 0xe, 0x13, 0x6e, 0x95, 0x69, 0x20, 0xd1, 0x47, 0x4f, 0xb4, 0x96, 0xe9, 0x53, 0x3d, 0x89, 0x53, 0x2a}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"faucet.html": faucetHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"faucet.html": {faucetHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
